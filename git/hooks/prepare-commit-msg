#!/bin/sh

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Crossplatform prepare-commit-msg for Conventional Commits #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

NO_TASK_FLAG="--"
ISSUE_ID_REGEX="[A-Za-z0-9_.]+-[0-9]+"
REFS_LINE_REGEX="^Refs:[[:space:]]*($ISSUE_ID_REGEX,?[[:space:]]*)+$"
CONVENTIONAL_PART_REGEX="([a-z]+)(!?)(\([^)]*\))?:"

# emojis for commits
EMOJI_feat="✨"      # New feature
EMOJI_fix="🐛"       # Bugfix
EMOJI_chore="🧹"     # Routine tasks
EMOJI_ci="👷"        # CI/CD
EMOJI_refactor="♻️"  # Refactoring
EMOJI_perf="🚀"      # Perfomance
EMOJI_docs="📝"      # Documenatation
EMOJI_build="📦"     # Build (requirements, packages, etc)
EMOJI_style="🎨"     # Code style
EMOJI_test="🧪"      # Tests
EMOJI_revert="↩️"    # Reverting

ALL_EMOJIS="($EMOJI_feat|$EMOJI_fix|$EMOJI_chore|$EMOJI_ci|$EMOJI_refactor|$EMOJI_perf|$EMOJI_docs|$EMOJI_build|$EMOJI_style|$EMOJI_test|$EMOJI_revert)"

get_emoji() {
    case "$1" in
        feat*) echo "$EMOJI_feat" ;;
        fix*) echo "$EMOJI_fix" ;;
        chore*) echo "$EMOJI_chore" ;;
        ci*) echo "$EMOJI_ci" ;;
        refactor*) echo "$EMOJI_refactor" ;;
        perf*) echo "$EMOJI_perf" ;;
        docs*) echo "$EMOJI_docs" ;;
        build*) echo "$EMOJI_build" ;;
        style*) echo "$EMOJI_style" ;;
        test*) echo "$EMOJI_test" ;;
        revert*) echo "$EMOJI_revert" ;;
        *) echo "" ;;
    esac
}

branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)

commit_message=$(cat "$1")
first_line=$(echo "$commit_message" | head -n1)
refs_line=$(echo "$commit_message" | tail -n +2 | grep -E "$REFS_LINE_REGEX" | tail -n 1)
other_lines=$(echo "$commit_message" | tail -n +2 |  sed -E "/$REFS_LINE_REGEX/d")

no_task_filler=$(echo $first_line | grep -oE "^.*${NO_TASK_FLAG}[[:space:]]*$")

if [ -z "$no_task_filler" ]; then
    issue_id=$(echo "$branch_name" | grep -oE "$ISSUE_ID_REGEX" | head -n1)
else 
    first_line=$(echo "$first_line" | sed -E "s/[[:space:]]*--[[:space:]]*//")
    issue_id=""
fi

# check that commit message is a conventional commit message
if echo "$first_line" | grep -qE "^(${ALL_EMOJIS}[[:space:]]*)?${CONVENTIONAL_PART_REGEX}"; then
    current_emoji=$(echo "$first_line" | grep -oE "^${ALL_EMOJIS}")
    line_wo_emoji=$(echo "$first_line" | sed -E "s/^${ALL_EMOJIS}[[:space:]]*//")

    # case when emoji was not found, but emoji exist
    if ! echo "$line_wo_emoji" | grep -qE "^$CONVENTIONAL_PART_REGEX"; then
        line_wo_emoji=$(echo "$first_line" | grep -oE "${CONVENTIONAL_PART_REGEX}.*")
    fi

    commit_type=$(echo "$line_wo_emoji" | sed -E "s/^$CONVENTIONAL_PART_REGEX.*/\1/")
    breaking_mark=$(echo "$line_wo_emoji" | sed -E "s/^$CONVENTIONAL_PART_REGEX.*/\2/")
    scope=$(echo "$line_wo_emoji" | sed -E "s/^$CONVENTIONAL_PART_REGEX.*/\3/" | tr -d '()')
    description=$(echo "$line_wo_emoji" | sed -E "s/^$CONVENTIONAL_PART_REGEX[[:space:]]*//")
    emoji=${current_emoji:-$(get_emoji "$commit_type")}

    [ -n "$scope" ] && first_line="$emoji $commit_type$breaking_mark($scope): $description" || first_line="$emoji $commit_type$breaking_mark: $description"
fi

# adding link to issue into refs_line
if [ -n "$issue_id" ]; then
    [ -z "$refs_line" ] && refs_line="Refs: $issue_id"
    if ! echo "$refs_line" | grep -q "$issue_id"; then
        refs_line="$refs_line, $issue_id"
    fi
fi

# compose final message
{
  echo "$first_line"
  [ -n "$other_lines" ] && echo "$other_lines"
  [ -n "$refs_line" ] && echo && echo "$refs_line"
} | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"

