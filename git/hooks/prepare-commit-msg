#!/bin/sh

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Crossplatform prepare-commit-msg for Conventional Commits #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# issue id regex (something like JIRA-123, GH-34, PROJECT-1)
ISSUE_ID_REGEX="[A-Za-z0-9_.-]+-[0-9]+"
CONVENTIONAL_PART_REGEX="([a-z]+)(!?)(\([^)]*\))?:"

# emojis for commits
EMOJI_feat="✨"      # New feature
EMOJI_fix="🐛"       # Bugfix
EMOJI_chore="🧹"     # Routine tasks
EMOJI_ci="👷"        # CI/CD
EMOJI_refactor="♻️"  # Refactoring
EMOJI_perf="🚀"      # Perfomance
EMOJI_docs="📝"      # Documenatation
EMOJI_build="📦"     # Build (requirements, packages, etc)
EMOJI_style="🎨"     # Code style
EMOJI_test="🧪"      # Tests
EMOJI_revert="↩️"    # Reverting

ALL_EMOJIS="($EMOJI_feat|$EMOJI_fix|$EMOJI_chore|$EMOJI_ci|$EMOJI_refactor|$EMOJI_perf|$EMOJI_docs|$EMOJI_build|$EMOJI_style|$EMOJI_test|$EMOJI_revert)"

get_emoji() {
    case "$1" in
        feat*) echo "$EMOJI_feat" ;;
        fix*) echo "$EMOJI_fix" ;;
        chore*) echo "$EMOJI_chore" ;;
        ci*) echo "$EMOJI_ci" ;;
        refactor*) echo "$EMOJI_refactor" ;;
        perf*) echo "$EMOJI_perf" ;;
        docs*) echo "$EMOJI_docs" ;;
        build*) echo "$EMOJI_build" ;;
        style*) echo "$EMOJI_style" ;;
        test*) echo "$EMOJI_test" ;;
        revert*) echo "$EMOJI_revert" ;;
        *) echo "" ;;
    esac
}

branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
issue_id=$(echo "$branch_name" | grep -oE "$ISSUE_ID_REGEX" | head -n1)
commit_message=$(cat "$1")

first_line=$(echo "$commit_message" | head -n1)
other_lines=$(echo "$commit_message" | tail -n +2)

# commit message is "Conventional Commits" like message?
if echo "$commit_message" | grep -qE "^($ALL_EMOJIS )?${CONVENTIONAL_PART_REGEX}"; then

    # checking that the emoji already exists
    current_emoji=$(echo "$commit_message" | grep -oE "^$ALL_EMOJIS " | tr -d ' ')

    # parsing the commit message
    if [ -n "$current_emoji" ]; then
        temp_message=$(echo "$first_line" | sed -E "s/^$current_emoji //")
        commit_type=$(echo "$temp_message" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\1/")
        breaking_mark=$(echo "$temp_message" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\2/")
        scope=$(echo "$temp_message" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\3/" | tr -d '()')
        description=$(echo "$temp_message" | sed -E "s/^${CONVENTIONAL_PART_REGEX}[[:space:]]*//")
        emoji=$current_emoji
    else
        commit_type=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\1/")
        breaking_mark=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\2/")
        scope=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\3/" | tr -d '()')
        description=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}[[:space:]]*//")
        emoji=$(get_emoji "$commit_type")
    fi

    # checking that issue ID already exists in the scope
    existing_issue_in_scope=$(echo "$scope" | grep -oE "$ISSUE_ID_REGEX" | head -n1)

    # building new commit message from parts
    if [ -n "$scope" ]; then
        if [ -n "$existing_issue_in_scope" ]; then
            # if the issue ID already exists in the scope, then leave it as is
            new_message="$emoji $commit_type$breaking_mark($scope): $description"
        elif [ -n "$issue_id" ]; then
            # adding the issue ID to the existing scope
            new_message="$emoji $commit_type$breaking_mark($scope, $issue_id): $description"
        else
            # if issue ID doesn't exist - just adding an emoji
            new_message="$emoji $commit_type$breaking_mark($scope): $description"
        fi
    else
        if [ -n "$issue_id" ]; then
            # if no scope - just adding the issue ID
            new_message="$emoji $commit_type$breaking_mark($issue_id): $description"
        else
            # if no issue ID - just adding the emoji
            new_message="$emoji $commit_type$breaking_mark: $description"
        fi
    fi

    # combine new first line with the other lines
    if [ -z "$other_lines" ]; then
        echo "$new_message" > "$1"
    else
        printf "%s\n%s" "$new_message" "$other_lines" > "$1"
    fi

elif [ -n "$issue_id" ] && ! echo "$commit_message" | grep -qE "^$issue_id:"; then
    # for Non-Conventional Commits adding issue ID only if it is not present at the beginning
    if [ -z "$other_lines" ]; then
        echo "$issue_id: $first_line" > "$1"
    else
        printf "%s\n%s" "$issue_id: $first_line" "$other_lines" > "$1"
    fi
fi
