#!/bin/sh

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Crossplatform prepare-commit-msg for Conventional Commits #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

NO_TASK_FLAG="--"

# issue id regex (something like JIRA-123, GH-34, PROJECT-1)
ISSUE_ID_REGEX="[A-Za-z0-9_.]+-[0-9]+"
REFS_LINE_REGEX="^Refs:[[:space:]]*($ISSUE_ID_REGEX,?[[:space:]]*)+$"
CONVENTIONAL_PART_REGEX="([a-z]+)(!?)(\([^)]*\))?:"

# emojis for commits
EMOJI_feat="✨"      # New feature
EMOJI_fix="🐛"       # Bugfix
EMOJI_chore="🧹"     # Routine tasks
EMOJI_ci="👷"        # CI/CD
EMOJI_refactor="♻️"  # Refactoring
EMOJI_perf="🚀"      # Perfomance
EMOJI_docs="📝"      # Documenatation
EMOJI_build="📦"     # Build (requirements, packages, etc)
EMOJI_style="🎨"     # Code style
EMOJI_test="🧪"      # Tests
EMOJI_revert="↩️"    # Reverting

ALL_EMOJIS="($EMOJI_feat|$EMOJI_fix|$EMOJI_chore|$EMOJI_ci|$EMOJI_refactor|$EMOJI_perf|$EMOJI_docs|$EMOJI_build|$EMOJI_style|$EMOJI_test|$EMOJI_revert)"

get_emoji() {
    case "$1" in
        feat*) echo "$EMOJI_feat" ;;
        fix*) echo "$EMOJI_fix" ;;
        chore*) echo "$EMOJI_chore" ;;
        ci*) echo "$EMOJI_ci" ;;
        refactor*) echo "$EMOJI_refactor" ;;
        perf*) echo "$EMOJI_perf" ;;
        docs*) echo "$EMOJI_docs" ;;
        build*) echo "$EMOJI_build" ;;
        style*) echo "$EMOJI_style" ;;
        test*) echo "$EMOJI_test" ;;
        revert*) echo "$EMOJI_revert" ;;
        *) echo "" ;;
    esac
}

get_remote_special_char() {
    case "$1" in
        stash*) echo "" ;;
        bitbucket*) echo "" ;;
        gitlab*) echo "#" ;;
        ci*) echo "$EMOJI_ci" ;;
        refactor*) echo "$EMOJI_refactor" ;;
        perf*) echo "$EMOJI_perf" ;;
        docs*) echo "$EMOJI_docs" ;;
        build*) echo "$EMOJI_build" ;;
        style*) echo "$EMOJI_style" ;;
        test*) echo "$EMOJI_test" ;;
        revert*) echo "$EMOJI_revert" ;;
        *) echo "" ;;
    esac
}

branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)

commit_message=$(cat "$1")
first_line=$(echo "$commit_message" | head -n1)
refs_line=$(echo "$commit_message" | tail -n +2 | grep -E "$REFS_LINE_REGEX" | tail -n 1)
other_lines=$(echo "$commit_message" | tail -n +2 |  sed -E "/$REFS_LINE_REGEX/d")

no_task_filler=$(echo $first_line | grep -oE "^.*${NO_TASK_FLAG}[[:space:]]*$")

if [ -z "$no_task_filler" ]; then
  issue_id=$(echo "$branch_name" | grep -oE "$ISSUE_ID_REGEX" | head -n1)
else 
  first_line=$(echo "$first_line" | sed -E "s/[[:space:]]*--[[:space:]]* //")
  issue_id=""
fi

# first line is "Conventional Commits" like message?
if echo "$first_line" | grep -qE "^(${ALL_EMOJIS}[[:space:]]*)?${CONVENTIONAL_PART_REGEX}"; then

    # checking that the emoji already exists
    current_emoji=$(echo "$commit_message" | grep -oE "^$ALL_EMOJIS")

    # parsing the commit message
    if [ -n "$current_emoji" ]; then
        no_emoji_first_line=$(echo "$first_line" | sed -E "s/^$current_emoji //")
        commit_type=$(echo "$no_emoji_first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\1/")
        breaking_mark=$(echo "$no_emoji_first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\2/")
        scope=$(echo "$no_emoji_first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\3/" | tr -d '()')
        description=$(echo "$no_emoji_first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}[[:space:]]*//")
        emoji=$current_emoji
    else
        commit_type=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\1/")
        breaking_mark=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\2/")
        scope=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}.*/\3/" | tr -d '()')
        description=$(echo "$first_line" | sed -E "s/^${CONVENTIONAL_PART_REGEX}[[:space:]]*//")
        emoji=$(get_emoji "$commit_type")
    fi

    # building new commit message from parts
    if [ -n "$scope" ]; then
        first_line="$emoji $commit_type$breaking_mark($scope): $description"
    else
        first_line="$emoji $commit_type$breaking_mark: $description"
    fi

    # checking that issue ID already exists in the scope
    issue_already_in_refs=$(echo "$refs_line" | grep -oE "$issue_id" | head -n1)

    if [ -n "$issue_already_in_refs" ]; then
        if [ -n "$other_lines" ]; then
            printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        else
            printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        fi
    else
        if [ -n "$refs_line" ]; then
            if [ -n "$issue_id" ]; then
                refs_line="$refs_line, $issue_id"
            fi
            if [ -n "$other_lines" ]; then
                printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            else
                printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            fi
        else
            if [ -n "$issue_id" ]; then
                refs_line="Refs: $issue_id"
            fi
            if [ -n "$other_lines" ]; then
                printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            else
                printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            fi
        fi
    fi
elif [ -n "$issue_id" ]; then
    # checking that issue ID already exists in the scope
    issue_already_in_refs=$(echo "$refs_line" | grep -oE "$issue_id" | head -n1)

    if [ -n "$issue_already_in_refs" ]; then
        if [ -n "$other_lines" ]; then
            printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        else
            printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        fi
    else
        if [ -n "$refs_line" ]; then
            refs_line="$refs_line, $issue_id"
            if [ -n "$other_lines" ]; then
                printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            else
                printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            fi
        else
            refs_line="Refs: $issue_id"
            if [ -n "$other_lines" ]; then
                printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            else
                printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
            fi
        fi
    fi
else
    if [ -n "$refs_line" ]; then
        if [ -n "$other_lines" ]; then
            printf "%s\n%s\n\n%s" "$first_line" "$other_lines" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        else
            printf "%s\n\n%s" "$first_line" "$refs_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        fi
    else
        if [ -n "$other_lines" ]; then
            printf "%s\n%s" "$first_line" "$other_lines" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        else
            printf "%s" "$first_line" | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' > "$1"
        fi
    fi
fi
